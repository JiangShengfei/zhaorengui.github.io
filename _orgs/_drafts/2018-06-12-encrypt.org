#+TITLE:     加密算法
#+AUTHOR:    Zhao Rengui
#+EMAIL:     zrg1390556487@gmail.com
#+LANGUAGE:  cn
#+OPTIONS:   H:3 num:t toc:2 \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:plain toc:t ltoc:t mouse:underline buttons:0 path:http://cs3.swfc.edu.cn/~20121156044/.org-info.js />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://cs3.swfu.edu.cn/~20121156044/.org-manual.css" />
#+HTML_HEAD: <style>body {font-size:14pt} code {font-weight:bold;font-size:100%; color:darkblue}</style>
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT: 
# (setq org-export-html-use-infojs nil)
# (setq org-export-html-style nil)

* 几种常用加密算法
** DES加密算法
: DES加密算法是一种分组密码，以64位为分组对数据加密，它的密钥长度是56位，加密解密用同一算法。

: DES加密算法是对密钥进行保密，而公开算法，包括加密和解密算法。这样，只有掌握了和发送方相同密钥的人才能解读
: 由DES加密算法加密的密文数据。因此，破译DES加密算法实际上就是搜索密钥的编码。

: 对于56位长度的密钥来说，如果用穷举法来进行搜索的话，其运算次数为256。随着计算机系统能力的不断发展，DES的安
: 全性比它刚出现时会弱得多，然而从非关键性质的实际出发，仍可以认为它是足够的。不过，DES现在仅用于旧系统的鉴
: 定，而更多地选择新的加密标准。
** AES加密算法
: AES加密算法是密码学中的高级加密标准，该加密算法采用对称分组密码体制，密钥长度的最少支持为128、192、256，
: 分组长度128位，算法应易于各种硬件和软件实现。这种加密算法是美国联邦政府采用的区块加密标准，这个标准用来替
: 代原先的DES，已经被多方分析且广为全世界所使用。

: AES加密算法被设计为支持128／192／256位（/32=nb)数据块大小（即分组长度）；支持128／192／256位（/32=nk)密码
: 长度，在10进制里，对应34×1038、62×1057、1.1×1077个密钥。
** RSA加密算法
: RSA加密算法是目前最有影响力的公钥加密算法，并且被普遍认为是目前最优秀的公钥方案之一。RSA是第一个能同时用于
: 加密和数宇签名的算法，它能够抵抗到目前为止已知的所有密码攻击，已被ISO推荐为公钥数据加密标准。

: RSA加密算法基于一个十分简单的数论事实：将两个大素数相乘十分容易，但那时想要对其乘积进行因式分解却极其困难，
: 因此可以将乘积公开作为加密密钥。
** Base64加密算法
: Base64加密算法是网络上最常见的用于传输8bit字节代码的编码方式之一，Base64编码可用于在HTTP环境下传递较长的标识
: 信息。例如，在JAVAPERSISTENCE系统HIBEMATE中，采用了Base64来将一个较长的唯一标识符编码为一个字符串，用作HTTP
: 表单和HTTPGETURL中的参数。在其他应用程序中，也常常需要把二进制数据编码为适合放在URL（包括隐藏表单域）中的形
: 式。此时，采用Base64编码不仅比较简短，同时也具有不可读性，即所编码的数据不会被人用肉眼所直接看到。
** MD5加密算法
: MD5为计算机安全领域广泛使用的一种散列函数，用以提供消息的完整性保护。对MD5加密算法简要的叙述可以为：MD5以
: 512位分组来处理输入的信息，且每一分组又被划分为16个32位子分组，经过了一系列的处理后，算法的输出由四个32位分
: 组组成，将这四个32位分组级联后将生成—个128位散列值。

: MD5被广泛用于各种软件的密码认证和钥匙识别上。MD5用的是哈希函数，它的典型应用是对一段信息产生信息摘要，以防
: 止被篡改。

: MD5的典型应用是对一段Message产生fingerprin指纹，以防止被“篡改”。如果再有—个第三方的认证机，用MD5还可以防
: 止文件作者的“抵赖”，这就是所谓的数字签名应用

: MD5还广泛用于操作系统的登陆认证上，如UNIX、各类BSD系统登录密码、数字签名等诸多方。
** SHA-1加密算法
: SHA-1是和MD5一样流行的消息摘要算法。 SHA1的全称是Secure Hash Algorithm(安全哈希算法) ，SHA加密算法模仿MD4加
: 密算法。SHA1设计为和数字签名算法（DSA）一起使用。

: SHA-1主要适用于数字签名标准里面定义的数字签名算法。对于长度小于264位的消息，SHA1会产生一个160位的消息摘要。
: 当接收到消息的时候，这个消息摘要可以用来验证数据的完整性。在传输的过程中，数据很可能会发生变化，那么这时候
: 就会产生不同的消息摘要。SHA1不可以从消息摘要中复原信息，而两个不同的消息不会产生同样的消息摘要。这样，SHA1
: 就可以验证数据的完整性，所以说SHA1是为了保证文件完整性的技术。

: SHA1加密算法可以采用不超过264位的数据输入，并产生一个160位的摘要。输入被划分为512位的块，并单独处理。160位
: 缓冲器用来保存散列函数的中间和最后结果。缓冲器可以由5个32位寄存器（A、B、C、D和E）来表示。SHA1是一种比MD5的
: 安全性强的算法，理论上，凡是采取“消息摘要”方式的数字验证算法都是有“碰撞”的——也就是两个不同的东西算出的
: 消息摘要相同，互通作弊图就是如此。但是安全性高的算法要找到指定数据的“碰撞”很困难，而利用公式来计算“碰撞
: 就更困难，目前为止通用安全算法中仅有MD5被破解。
** 小结
: 加密算法是密码技术的核心，以上这些加密算法是常用的加密算法，而这些算法有些已经遭到破译，有些安全度不高，有
: 些强度不明，有些待进—步分析，有些需要深入研究，而神秘的加密算法世界，又会有新的成员加入，期待更安全的算法诞生。
* DES加密算法
** C# Code
#+BEGIN_SRC emacs-lisp
#region DES加密解密
/// <summary>
/// DES加密
/// </summary>
/// <param name="data">加密数据</param>
/// <param name="key">8位字符的密钥字符串</param>
/// <param name="iv">8位字符的初始化向量字符串</param>
/// <returns></returns>
public static string DESEncrypt(string data, string key, string iv)
{
    byte[] byKey = System.Text.ASCIIEncoding.ASCII.GetBytes(key);
    byte[] byIV = System.Text.ASCIIEncoding.ASCII.GetBytes(iv);
    
    DESCryptoServiceProvider cryptoProvider = new DESCryptoServiceProvider();
    int i = cryptoProvider.KeySize;
    MemoryStream ms = new MemoryStream();
    CryptoStream cst = new CryptoStream(ms, cryptoProvider.CreateEncryptor(byKey, byIV), CryptoStreamMode.Write);
 
    StreamWriter sw = new StreamWriter(cst);
    sw.Write(data);
    sw.Flush();
    cst.FlushFinalBlock();
    sw.Flush();
    return Convert.ToBase64String(ms.GetBuffer(), 0, (int)ms.Length);
}

/// <summary>
/// DES解密
/// </summary>
/// <param name="data">解密数据</param>
/// <param name="key">8位字符的密钥字符串(需要和加密时相同)</param>
/// <param name="iv">8位字符的初始化向量字符串(需要和加密时相同)</param>
/// <returns></returns>
public static string DESDecrypt(string data, string key, string iv)
{
    byte[] byKey = System.Text.ASCIIEncoding.ASCII.GetBytes(key);
    byte[] byIV = System.Text.ASCIIEncoding.ASCII.GetBytes(iv);
    
    byte[] byEnc;
    try
    {
        byEnc = Convert.FromBase64String(data);
    }
    catch
    {
        return null;
    }
    
    DESCryptoServiceProvider cryptoProvider = new DESCryptoServiceProvider();
    MemoryStream ms = new MemoryStream(byEnc);
    CryptoStream cst = new CryptoStream(ms, cryptoProvider.CreateDecryptor(byKey, byIV), CryptoStreamMode.Read);
    StreamReader sr = new StreamReader(cst);
    return sr.ReadToEnd();
}
#endregion
#+END_SRC
* MD5加密算法
** C# Code
#+BEGIN_SRC emacs-lisp
#region MD5加密
/// <summary>
/// MD5加密
/// </summary>
/// <param name="input">需要加密的字符串</param>
/// <returns></returns>
public static string MD5Encrypt(string input)
{
    return MD5Encrypt(input, new UTF8Encoding());
}

/// <summary>
/// MD5加密
/// </summary>
/// <param name="input">需要加密的字符串</param>
/// <param name="encode">字符的编码</param>
/// <returns></returns>
public static string MD5Encrypt(string input, Encoding encode)
{
    MD5 md5 = new MD5CryptoServiceProvider();
    byte[] t = md5.ComputeHash(encode.GetBytes(input));
    StringBuilder sb = new StringBuilder(32);
    for (int i = 0; i < t.Length; i++)
        sb.Append(t[i].ToString("x").PadLeft(2, '0'));
        return sb.ToString();
    }
    
/// <summary>
/// MD5对文件流加密
/// </summary>
/// <param name="sr"></param>
/// <returns></returns>
public static string MD5Encrypt(Stream stream)
{
    MD5 md5serv = MD5CryptoServiceProvider.Create();
    byte[] buffer = md5serv.ComputeHash(stream);
    StringBuilder sb = new StringBuilder();
    foreach (byte var in buffer)
        sb.Append(var.ToString("x2"));
    return sb.ToString();
}

/// <summary>
/// MD5加密(返回16位加密串)
/// </summary>
/// <param name="input"></param>
/// <param name="encode"></param>
/// <returns></returns>
public static string MD5Encrypt16(string input, Encoding encode)
{
    MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider();
    string result = BitConverter.ToString(md5.ComputeHash(encode.GetBytes(input)), 4, 8);
    result = result.Replace("-", "");
    return result;
}
#endregion
#+END_SRC
* 3DES加密算法
** C# Code
#+BEGIN_SRC emacs-lisp
#region 3DES 加密解密
public static string DES3Encrypt(string data, string key)
{
   TripleDESCryptoServiceProvider DES = new TripleDESCryptoServiceProvider();
   
   DES.Key = ASCIIEncoding.ASCII.GetBytes(key);
   DES.Mode = CipherMode.CBC;
   DES.Padding = PaddingMode.PKCS7;
   
   ICryptoTransform DESEncrypt = DES.CreateEncryptor();
   
   byte[] Buffer = ASCIIEncoding.ASCII.GetBytes(data);
   return Convert.ToBase64String(DESEncrypt.TransformFinalBlock(Buffer, 0, Buffer.Length));
}

public static string DES3Decrypt(string data, string key)
{
    TripleDESCryptoServiceProvider DES = new TripleDESCryptoServiceProvider();
 
    DES.Key = ASCIIEncoding.ASCII.GetBytes(key);
    DES.Mode = CipherMode.CBC;
    DES.Padding = System.Security.Cryptography.PaddingMode.PKCS7;
    
    ICryptoTransform DESDecrypt = DES.CreateDecryptor();
    
    string result = "";
    try
    {
        byte[] Buffer = Convert.FromBase64String(data);
        result = ASCIIEncoding.ASCII.GetString(DESDecrypt.TransformFinalBlock(Buffer, 0, Buffer.Length));
    }
    catch (Exception e)
    {
    
    }
    return result;
}
#endregion
#+END_SRC
* Base64加密算法
** C# Code
#+BEGIN_SRC emacs-lisp
/// <summary>
/// 加密
/// </summary>
/// <param name="codeType"></param>
/// <param name="code"></param>
/// <returns></returns>
public static string Base64Encrypt(string codeType,string code)
{
    string encode = "";
    byte[] bytes = Encoding.GetEncoding(codeType).GetBytes(code);
    try
    {
        encode = Convert.ToBase64String(bytes);
    }
    catch (Exception ex)
    {
        encode = code;
    }
    return encode;
}
/// <summary>
/// 解密
/// </summary>
/// <param name="codeType"></param>
/// <param name="code"></param>
/// <returns></returns>
public static string Base64Decrypt(string codeType,string code)
{
    string decode = "";
    byte[] bytes = Convert.FromBase64String(code); 
    try
    {
        decode = Encoding.GetEncoding(codeType).GetString(bytes); //将指定字节数组中的一个字节序列解码为一个字符串。 
    }
    catch (Exception ex)
    {
        decode = code;
    }
    return decode;
}
#+END_SRC
//简写
#+BEGIN_SRC emacs-lisp
#region Base64加密解密
/// <summary>
/// Base64加密
/// </summary>
/// <param name="input">需要加密的字符串</param>
/// <returns></returns>
public static string Base64Encrypt(string input)
{
    return Base64Encrypt(input, new UTF8Encoding());
}

/// <summary>
/// Base64加密
/// </summary>
/// <param name="input">需要加密的字符串</param>
/// <param name="encode">字符编码</param>
/// <returns></returns>
public static string Base64Encrypt(string input, Encoding encode)
{
    return Convert.ToBase64String(encode.GetBytes(input));
}
 
/// <summary>
/// Base64解密
/// </summary>
/// <param name="input">需要解密的字符串</param>
/// <returns></returns>
public static string Base64Decrypt(string input)
{
    return Base64Decrypt(input, new UTF8Encoding());
}
 
/// <summary>
/// Base64解密
/// </summary>
/// <param name="input">需要解密的字符串</param>
/// <param name="encode">字符的编码</param>
/// <returns></returns>
public static string Base64Decrypt(string input, Encoding encode)
{
    return encode.GetString(Convert.FromBase64String(input));
}
#endregion
#+END_SRC
** JavaScript Code
#+BEGIN_SRC js emacs-lisp
// private property
var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
function encodeBase64(input) {
    var output = "";
    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
    var i = 0;
    input = _utf8_encode(input);
    while (i < input.length) {
        chr1 = input.charCodeAt(i++);
	chr2 = input.charCodeAt(i++);
	chr3 = input.charCodeAt(i++);
	enc1 = chr1 >> 2;
	enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
	enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
	enc4 = chr3 & 63;
	if (isNaN(chr2)) {
	    enc3 = enc4 = 64;
        } else if (isNaN(chr3)) {
	    enc4 = 64;
        }
	output +=_keyStr.charAt(enc1);
        output+= _keyStr.charAt(enc2);
        output+=_keyStr.charAt(enc3);
        output+= _keyStr.charAt(enc4);
   }
   return output;
}
//Base64 解密
function decodeBase64(input) {
    var output = "";
    var chr1, chr2, chr3;
    var enc1, enc2, enc3, enc4;
    var i = 0;
    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
    while (i < input.length) {
        enc1 = _keyStr.indexOf(input.charAt(i++));
        enc2 = _keyStr.indexOf(input.charAt(i++));
        enc3 = _keyStr.indexOf(input.charAt(i++));
        enc4 = _keyStr.indexOf(input.charAt(i++));
        chr1 = (enc1 << 2) | (enc2 >> 4);
        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
        chr3 = ((enc3 & 3) << 6) | enc4;
        output = output + String.fromCharCode(chr1);
        if (enc3 != 64) {
            output = output + String.fromCharCode(chr2);
        }
        if (enc4 != 64) {
            output = output + String.fromCharCode(chr3);
        }
    }
    output = _utf8_decode(output);
    return output;
}
// private method for UTF-8 decoding
function _utf8_decode(utftext) {
    var string = "";
    var i = 0;
    var c = c1 = c2 = 0;
    while (i < utftext.length) {
        c = utftext.charCodeAt(i);
        if (c < 128) {
            string += String.fromCharCode(c);
            i++;
        } else if ((c > 191) && (c < 224)) {
            c2 = utftext.charCodeAt(i + 1);
            string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
            i += 2;
        } else {
            c2 = utftext.charCodeAt(i + 1);
            c3 = utftext.charCodeAt(i + 2);
            string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
            i += 3;
        }
    }
    return string;
}
#+END_SRC
** 参考资料
: http://www.it610.com/article/1219677.htm
: https://www.bbsmax.com/A/xl56xMRkzr/
* 参考资料
: http://www.cnblogs.com/zyw-205520/p/5585014.html
: https://zh.wikipedia.org/wiki/SHA%E5%AE%B6%E6%97%8F
: http://www.cnblogs.com/malaohu/p/3214136.html
