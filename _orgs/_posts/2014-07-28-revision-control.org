#+TITLE:    Subversion、Git和GitHub使用教程
#+AUTHOR:    赵仁贵
#+EMAIL:     zrg1390556487@gmail.com
#+LANGUAGE:  cn
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:plain toc:t ltoc:t mouse:underline buttons:0 path:http://cs3.swfc.edu.cn/~20121156044/.org-info.js />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://cs3.swfu.edu.cn/~20121156044/.org-manual.css" />
#+HTML_HEAD_EXTRA: <style>body {font-size:16pt} code {font-weight:bold;font-size:100%; color:darkblue}</style>
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT: 

#+BEGIN_EXPORT HTML
---
layout: post
title: Subversion、Git和GitHub
author: zrg
comments: false
description: 常用版本控制软件使用笔记
categories: 
- software
tags:
- Subversion
- Git
- GitHub
photos:
---
#+END_EXPORT

# (setq org-export-html-use-infojs nil)
如果你有任何问题，可以发邮件到zrg1390556487@gmail.com。
# (setq org-export-html-style nil)

* Subversion
** 下载
: //官网地址
: http://subversion.apache.org/
: https://tortoisesvn.net/
** TortoiseSVN进行增量发布
: 1.右键》选择TortoiseSVN->Show Log（显示日志）
: 2.选中更新版本段》右键选择Compare revisions（版本比较）
: 3.全选》右键选择Export selection to…（导出所选文件到…）
* GitHub
** 简单介绍
: 官网地址：https://github.com/

: GitHub是一个利用Git进行版本控制、专门用于存放软件代码与内容的共享虚拟主机服务。它由GitHub公司（曾称Logical Awesome）的开发者Chris Wanstrath、PJ Hyett和Tom Preston-Werner使用Ruby on Rails编写而成。

: GitHub同时提供付费账户和免费账户。
** Git vs SVN
: 1.Git是分布式的，SVN不是；
: 2.Git把内容按元数据方式存储，而SVN是按文件；
: 3.Git分支与SVN的分支不同；
: 4.Git没有一个全局的版本号，而SVN有；
: 5.Git的内容完整性要优于SVN：Git内容存储使用的是SHA-1算法。。
** 一些基本概念
: 1.Repository(仓库)：用于存放项目源代码。

: 2.Star(收藏)：收藏项目

: 3.Fork(复制克隆项目)

: 4.Pull Request(发送请求)：基于Fork，修改或删除代码提交请求。

: 5.Watch(关注)：假设项目有任何更新，第一时间收到通知消息。

: 6.Issue(事务卡片)：发现了代码存在BUG，但是目前没有成型代码，需要讨论时使用。
** 上传代码方式
*** SSH方式传输
: //使用SSH方式，在提交时，不需要输入用户名和密码。

: 1.首先在本地创建ssh key，一直回车。
: $ ssh-keygen -t rsa -C "your_email@youremail.com"
: //成功的话会在~/目录下生成.ssh文件夹，进入.ssh目录，打开id_rsa.pub文件，复制里面的key。

: 2.进入github官网上，点击个人中心的 Account Settings（账户配置），左边选择"SSH Keys" > "Add SSH Key",title自定义填写，然后将复制的key粘贴到GitHub的文本框中。下面是添加好的SSH Keys示例：
[[../../../../../assets/images/sshkeys.png]]
 
: 3.验证是否成功:
: $ ssh -T git@github.com 
*** HTTPS方式传输
: 使用条件：1）本地配置了global；2）需要输入用户名和密码推送代码
*** 配置免登录提交代码
: $ vim .git/config
#+BEGIN_SRC emacs-lisp
[remote "origin"]
    url=https://github.com/用户名/仓库名.git
修改为：
[remote "origin"]
    url=https://用户名:密码@github.com/用户名/仓库名.git
#+END_SRC
** 开源项目贡献流程
: 1.新建Issue：提交问题或建议或想法。
: 2.Pull Request：Fork项目，修改代码，发起修改请求。
* Git
** 安装&配置
: 1.Ubuntu 10.10(maverick)或更新版本，Debian(squeeze)或更新版本：
: $ sudo aptitude install git
: $ sudo aptitude install git-doc git-svn git-email gitk
: 
: 2.Ubuntu 10.04(lucid)或更老版本，Debian(lenny)或更老版本：
: $ sudo aptitude install git-core
: $ sudo aptitude install git-doc git-svn git-email gitk
: 
: 3.RHEL、Fedora、CentOS:
: $ yum install git
: $ yum install git-svn git-email gitk

: //查看版本
: $ git --version

: 4.配置git
: //设置username和email，因为github每次commit都会记录他们。
: $ git config --global user.name "your name" //配置用户名
: $ git config --global user.email "your_email@youremail.com" //配置邮箱
 
: //中文支持UTF-8：
: $ git config --global core.quotepath false
: //中文支持GBK：
: $ git config --global i18n.logOutputEncoding gbk
: //录入提交说明的字符集：
: $ git config --global i18n.commitEncoding gbk

: //查看配置信息
: $ git config -l

: //删除配置
: $ git config --unset --global user.name
: $ git config --unset --global user.email
** 一些基本操作
: //仓库初始化：新建目录，进入，执行如下命令：
: $ git init
: //查看仓库状态
: $git status

: //检出仓库（本地）
: $ git clone /path/to/repository
: //检出仓库（远端）
: $ git clone username@host:/path/to/repository
: $ git clone git@github.com:xxx/hello_world.git //GitHub
: //拉取仓库（分支）内容(update)
: $ git pull
: $ git pull orgion feature-A

: //本地删除文件
: $ rm test.php
: //从Git仓库中删除文件
: $ git rm test.php

: //修改后添加到暂存区
: $ git add -A
: //从暂存区提交到本地仓库分支
: $ git commit -m "..."
: //推送到远端仓库
: $ git push
** 提交过程操作
*** 工作流
: 你的本地仓库由 git 维护的三棵“树”组成
: 第一个是你的工作目录，它持有实际文；
: 第二个是 缓存区（Index），它像个缓存区域，临时保存你的改动；
: 最后是 HEAD，指向你最近一次提交后的结果。
[[../../../../../assets/images/commit1.png]]

[[../../../../../assets/images/trees.png]]
*** 提交过程
: //添加到暂存区
: $ git add <filename>
: $ git add -A
: $ git add *

: //提交：实际提交改动
: $ git commit -m "Description"

: //推送：提交到远端仓库
: $ git push origin master //master为分支名称

: //如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：
: $ git remote add origin <server>
*** 更改提交
: //回溯历史版本
: $ git reset --hard 哈希值

: //冲突解决
: //在冲突发生时，往往需要删除其中之一。
: $git fetch origin //获取
: $git merge origin/master //合并

: //修改提交信息
: $ git commit --amend
: $ git log --graph //查看提交日志中的相应内容

: //压缩历史提交
: $ git rebase -i
: $ git rebase -i HEAD~2 //在历史记录中合并为一次完美的提交

: //替换本地改动：假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：
: $ git checkout -- <filename>
: //此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。

: //假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：
: $ git fetch origin
: $ git reset --hard origin/master
** 分支
*** 理解分支
[[../../../../../assets/images/branches.png]]

: 1.在 Git 中提交时，会保存一个提交（commit）对象，该对象包含一个指向暂存内容快照的指针，包含本次提交的作者等相关附属信息，
: 包含零个或多个指向该提交对象的父对象指针：首次提交是没有直接祖先的，普通提交有一个祖先，由两个或多个分支合并产生的提交则有多个祖先。

: 2.假设在工作目录中有三个文件，准备将它们暂存后提交。暂存操作会对每一个文件计算校验和（即第一章中提到的 SHA-1 哈希字串），
: 然后把当前版本的文件快照保存到 Git 仓库中（Git 使用 blob 类型的对象存储这些快照），并将校验和加入暂存区域：
: $ git add README test.rb LICENSE
: $ git commit -m 'initial commit of my project'

: 3.现在，Git 仓库中有五个对象：
: 三个表示文件快照内容的 blob 对象；
: 一个记录着目录树内容及其中各个文件对应 blob 对象索引的 tree 对象；
: 一个包含指向 tree 对象（根目录）的索引和其他提交信息元数据的 commit 对象。
#+CAPTION: 单个提交对象在仓库中的数据结构
#+NAME: 
[[../../../../../assets/images/git-branch01.png]]

: 4.作些修改后再次提交，那么这次的提交对象会包含一个指向上次提交对象的指针（译注：即下图中的 parent 对象）。两次提交后，仓库历史会变成下图的样子：
#+CAPTION: 多个提交对象之间的链接关系
#+NAME:
[[../../../../../assets/images/git-branch02.png]]

: 5.Git 中的分支，其实本质上仅仅是个指向 commit 对象的可变指针。在若干次提交后，你其实已经有了一个指向最后一次提交对象的 master 分支，它在每次提交的时候都会自动向前移动。
#+CAPTION: 分支其实就是从某个提交对象往回看的历史
#+NAME:
[[../../../../../assets/images/git-branch03.png]]

: 6.那么，Git 又是如何创建一个新的分支的呢？比如新建一个 test 分支，可以使用 git branch 命令：
: $ git branch test
: 这会在当前 commit 对象上新建一个分支指针，如图：
#+CAPTION: 多个分支指向提交数据的历史
#+NAME:
[[../../../../../assets/images/git-branch04.png]]

: 7.那么，Git 是如何知道你当前在哪个分支上工作的呢？它保存着一个名为 HEAD 的特别指针。
: 在 Git 中，它是一个指向你正在工作中的本地分支的指针（译注：将 HEAD 想象为当前分支的别名）。 
: 运行git branch 命令，仅仅是建立了一个新的分支，但不会自动切换到这个分支中去，所以，我们依然还在 master 分支里，如图：
#+CAPTION: HEAD 指向当前所在的分支
#+NAME:
[[../../../../../assets/images/git-branch05.png]]

: 8.要切换到其他分支，可以执行 git checkout 命令。切换到新建的 testing 分支：
: $ git checkout testing
: 这样 HEAD 就指向了 testing 分支：
#+CAPTION: HEAD 在你转换分支时指向新的分支
#+NAME:
[[../../../../../assets/images/git-branch06.png]]

: 9.不妨再提交一次：
: $ git commit -a -m 'made a change'
: 提交后的结果：
#+CAPTION: 每次提交后 HEAD 随着分支一起向前移动
#+NAME:
[[../../../../../assets/images/git-branch07.png]]

: 10.回到 master 分支看看：
: $ git checkout master
#+CAPTION: HEAD 在一次 checkout 之后移动到了另一个分支
#+NAME:
[[../../../../../assets/images/git-branch08.png]]

: 这条命令做了两件事。它把 HEAD 指针移回到 master 分支，并把工作目录中的文件换成了 master 分支所指向的快照内容。
: 也就是说，现在开始所做的改动，将始于本项目中一个较老的版本。它的主要作用是将 testing 分支里作出的修改暂时取消，这样你就可以向另一个方向进行开发。

: 11.作些修改后再次提交：
: $ git commit -a -m 'made other changes'
#+CAPTION: 不同流向的分支历史
#+NAME:
[[../../../../../assets/images/git-branch09.png]]

: 12.由于 Git 中的分支实际上仅是一个包含所指对象校验和（40 个字符长度 SHA-1 字串）的文件，所以创建和销毁一个分支就变得非常廉价。

: 这和大多数版本控制系统形成了鲜明对比，它们管理分支大多采取备份所有项目文件到特定目录的方式，所以根据项目文件数量和大小不同，
: 可能花费的时间也会有相当大的差别，快则几秒，慢则数分钟。而 Git 的实现与项目复杂度无关，它永远可以在几毫秒的时间内完成分支的创
: 建和切换。同时，因为每次提交时都记录了祖先信息（译注：即parent 对象），将来要合并分支时，寻找恰当的合并基础（译注：即共同祖先）
: 的工作其实已经自然而然地摆在那里了，所以实现起来非常容易。Git 鼓励开发者频繁使用分支，正是因为有着这些特性作保障。
*** 分支的创建与切换
: 实际工作中大体也会用到这样的工作流程：正在开发某个网站；为实现某个新的需求，创建了一个分支；正在这个分支上开展工作。
: 突然，接到一个电话说有个很严重的问题需要紧急修补，那么可以按照下面的方式处理：
: 1.返回到原先已经发布到生产服务器上的分支。
: 2.为这次紧急修补建立一个新分支，并在其中修复问题。
: 3.通过测试后，回到生产服务器所在的分支，将修补分支合并进来，然后再推送到生产服务器上。
: 4.切换到之前实现新需求的分支，继续工作。

: A.首先，我们假设你正在项目中愉快地工作，并且已经提交了几次更新：
#+CAPTION: 一个简短的提交历史
#+NAME:
[[../../../../../assets/images/git-branch10.png]]

: B.现在，你决定要修补问题追踪系统上的 #53 问题。（这里为了说明要解决的问题，才把新建的分支取名为 iss53。）
: $ git checkout -b iss53
: //这相当于执行下面这两条命令：
: $ git branch iss53
: $ git checkout iss53
: 该命令执行结果：
#+CAPTION: 创建了一个新分支（专门解决53问题）的指针 
#+NAME:
[[../../../../../assets/images/git-branch11.png]]

: 在提交了若干次更新后，iss53 分支的指针也会随着向前推进。
#+CAPTION: iss53 分支随工作进展向前推进
#+NAME:
[[../../../../../assets/images/git-branch12.png]]

: C.现在你就接到了那个网站问题的紧急电话，需要马上修补。
: 此时，确定你已经提交了所有的修改，接下来切换到 master 分支：
: $ git checkout master
: 切换回主分支后，工作目录中的内容和你在解决问题 #53 之前一模一样，你可以集中精力进行紧急修补。

: 特别注意：Git 会把工作目录的内容恢复为检出某分支时它所指向的那个提交对象的快照。它会自动添加、删除和修改文件以确保目录的内容和你当时提交时完全一样。

: 创建一个紧急修补分支 hotfix 来开展工作，直到搞定：
: $ git checkout -b 'hotfix'
#+CAPTION: hotfix 分支是从 master 分支所在点分化出来的
#+NAME:
[[../../../../../assets/images/git-branch13.png]]

: D.测试，确保修补是成功的。然后回到 master 分支并把它合并进来，然后发布到生产服务器。用 git merge 命令来进行合并：
: $ git checkout master
: $ git merge hotfix
Updating f42c576..3a0874c
Fast forward
 README |    1 -
 1 files changed, 0 insertions(+), 1 deletions(-)
: 请注意，合并时出现了“Fast forward”的提示。由于当前 master 分支所在的提交对象是要并入的 hotfix 分支的直接上游，Git 只需把master 分支指针直接右移。
: 换句话说，如果顺着一个分支走下去可以到达另一个分支的话，那么 Git 在合并两者时，只会简单地把指针右移，因为这种单线的历史分支不存在任何需要解决的分歧，所以这种合并过程可以称为快进（Fast forward）。
#+CAPTION: 合并之后，master 分支和 hotfix 分支指向同一位置
#+NAME:
[[../../../../../assets/images/git-branch14.png]]

: E.在那个超级重要的修补发布以后，你想要回到被打扰之前的工作。
: 由于当前 hotfix 分支和 master 都指向相同的提交对象，所以hotfix 已经完成了历史使命，可以删掉了。使用 git branch 的 -d 选项执行删除操作：
: $ git branch -d <BranchName>

: F.现在回到之前未完成的 #53 问题修复分支上继续工作
: $ git checkout iss53
#+CAPTION: iss53 分支可以不受影响继续推进
#+NAME:
[[../../../../../assets/images/git-branch15.png]]

*** 分支的合并
: A.在问题 #53 相关的工作完成之后，可以合并回 master 分支。
: $ git checkout master
: $ git merge iss53
: 请注意，这次合并操作的底层实现，并不同于之前 hotfix 的并入方式。如下图所示。

: 由于当前 master 分支所指向的提交对象（C4）并不是 iss53 分支的直接祖先，Git 不得不进行一些额外处理。
: 就此例而言，Git 会用两个分支的末端（C4 和 C5）以及它们的共同祖先（C2）进行一次简单的三方合并计算。
#+CAPTION: Git 为分支合并自动识别出最佳的同源合并点
#+NAME:
[[../../../../../assets/images/git-branch16.png]]

: Git 没有简单地把分支指针右移，而是对三方合并后的结果重新做一个新的快照，并自动创建一个指向它的提交对象（C6），见下图所示。
#+CAPTION: Git 自动创建了一个包含了合并结果的提交对象
#+NAME:
[[../../../../../assets/images/git-branch17.png]]

: B.既然之前的工作成果已经合并到 master 了，那么 iss53 也就没用了。你可以就此删除它，并在问题追踪系统里关闭该问题。
: $ git branch -d iss53
**** 遇到冲突时的分支合并
: 有时候合并操作并不会如此顺利。如果在不同的分支中都修改了同一个文件的同一部分，Git 就无法干净地把两者合到一起（译注：逻辑上说，这种问题只能由人来裁决）。

: 如果你在解决问题 #53 的过程中修改了hotfix 中修改的部分，将得到类似下面的结果：
: $ git merge iss53
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.
: Git 作了合并，但没有提交，它会停下来等你解决冲突。要看看哪些文件在合并时发生冲突，可以用 git status 查阅：
: $ git status
#+BEGIN_SRC emacs-lisp
index.html: needs merge
# On branch master
# Changed but not updated:
#   (use "git add 
      ..." to update what will be committed)
#   (use "git checkout -- 
       ..." to discard changes in working directory)
#
      #unmerged:   index.html
#+END_SRC
: 任何包含未解决冲突的文件都会以未合并（unmerged）的状态列出。
: Git 会在有冲突的文件里加入标准的冲突解决标记，可以通过它们来手工定位并解决这些冲突。可以看到此文件包含类似下面这样的部分：
#+BEGIN_SRC emacs-lisp
<<<<<<< HEAD:index.html
contact : email.support@github.com
=======
please contact us at support@github.com
>>>>>>> iss53:index.html
#+END_SRC
: 可以看到 ======= 隔开的上半部分，是 HEAD（即 master 分支，在运行merge 命令时所切换到的分支）中的内容，下半部分是在 iss53 分支中的内容。
: 解决冲突的办法：手动合并；利用合并工具自动合并。自动合并，可以利用有图形界面的工具来解决，运行：
: $ git mergetool
merge tool candidates: kdiff3 tkdiff xxdiff meld gvimdiff opendiff emerge vimdiff
Merging the files: index.html

Normal merge conflict for 'index.html':
  {local}: modified
  {remote}: modified
Hit return to start merge resolution tool (opendiff):

: 不想用默认的合并工具，可以在上方”merge tool candidates”里找到可用的合并工具列表，输入你想用的工具名。
: 再运行一次 git status 来确认所有冲突都已解决：
: $ git status

: 如果确认所有冲突都已解决，也就是进入了暂存区，就可以用 git commit 来完成这次合并提交。
: 提交的记录注释差不多是这样：
#+BEGIN_SRC emacs-lisp
Merge branch 'iss53'

Conflicts:
  index.html
#
# It looks like you may be committing a MERGE.
# If this is not correct, please remove the file
# .git/MERGE_HEAD
# and try again.
#
#+END_SRC
: 如果想给将来看这次合并的人一些方便，可以修改该信息，提供更多合并细节。

*** 分支的管理
: //git branch 命令不仅仅能创建和删除分支，如果不加任何参数，它会给出当前所有分支的清单：
: $ git branch

: //查看各个分支最后一个提交对象的信息
: $ git branch -v

: //要从该清单中筛选出你已经（或尚未）与当前分支合并的分支，可以用 --merge 和 --no-merged 选项
: $ git branch --merge
  iss53
*master
: //列表中没有 * 的分支通常都可以用 git branch -d 来删掉。原因很简单，既然已经把它们所包含的工作整合到了其他分支，删掉也不会损失什么。
: //查看尚未合并到当前分支的分支
: $ git branch --no-merged
: 这样就显示还未合并进来的分支列表，如果此时用git branch -d 删除该分支会提示错误，因为那样做会丢失数据：
: $ git branch -d testing
error: The branch 'testing' is not an ancestor of your current HEAD.
If you are sure you want to delete it, run 'git branch -D testing'.
: // 当然，你也可以用大写 -D 强制执行。

: 
:  
: //要更新你的本地仓库至最新改动，执行：
: $ git pull

: //要合并其他分支到你的当前分支（例如 master），执行：
: $ git merge <branch>

: //在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。
: //在合并改动之前，你可以使用如下命令预览差异：
: $ git diff <source_branch> <target_branch>
: //将分支推送到远端仓库$ git push origin <branch>
** 标签
: //显示所有标签
: $ git tag

: //推荐为软件发布创建标签。这个概念在SVN中也有。你可以执行如下命令创建一个叫做1.0.0的标签:
: $ git tag 1.0.0 1b2e1d63ff //1b2e1d63ff是你想要标记的提交 ID 的前 10 位字符。
: $ git tag -a V0.1 -m "版本0.1"

: //确认对应内容 
: $ git show V0.1

: //可以使用下列命令获取提交 ID：
: $ git log
** 日志、差别对比
: //查看提交日志
: $ git log

: //查看所有操作日志
: $ git reflog

: //显示文件的改动，不加具体文件可以查看全部文件的改动日志
: $ git log -p README.md

: //查看第一行简述日志信息
: $ git log --pretty=short

: //只显示指定文件的日志信息
: $ git log README.md

: //以图表形式输出分支提交日志
: $ git log --graph

: //查看更改前后的差别
: $git diff 

: //查看工作树和最新提交的差别
: $git diff HEAD
** 实用小贴士
: //内建的图形化 git：
: $ gitk
: 
: //彩色的 git 输出：
: $ git config color.ui true
: 
: //显示历史记录时，每个提交的信息只显示一行：
: $ git config format.pretty oneline
: 
: //交互式添加文件到暂存区：
: $ git add -i
** .gitignore 文件
: 
* Github Pages搭建网站
** 新建仓库搭建
: 1.创建个人站点，新建仓库。（注：仓库名必须为【用户名.github.io】）
: 2.在新建的仓库下，新建index.html文件即可。
: 注：(1)Github Pages仅支持静态网页;(2)仓库里面只能是.html文件
** 项目仓库下搭建
: 1.进入项目仓库主页，点击settings。
: 2.找到【Github Pages】，点击【Change theme】，选择主题来自动生成主题页面。
: 3.访问：https://用户名.github.io/仓库名
* 参考资料
: Git分支：http://www.open-open.com/lib/view/open1328069889514.html
: https://git-scm.com/book/en/v2
: 《GitHub入门与实践》[日]大塚弘记  //书籍
: https://github.com //GitHub官网
: http://www.worldhello.net/gotgit/01-meet-git/050-install-on-windows-cygwin.html //Cygwin for Windows
: http://www.bootcss.com/p/git-guide/
: http://www.oschina.net/news/12542/git-and-svn

