#+TITLE:     PHP Public Method
#+AUTHOR:    Rengui Zhao
#+EMAIL:     zrg1390556487@gmail.com
#+LANGUAGE:  cn
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:plain toc:t ltoc:t mouse:underline buttons:0 path:http://cs3.swfc.edu.cn/~20121156044/.org-info.js />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://cs3.swfu.edu.cn/~20121156044/.org-manual.css" />
#+HTML_HEAD: <style>body {font-size:14pt} code {font-weight:bold;font-size:100%; color:darkblue}</style>
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT: 

#+BEGIN_EXPORT HTML
---
layout: post
title: PHP 公共函数
author: zrg
comments: false
description: PHP 公共函数
categories:
- php
tags:
- PHP
photos:
---
#+END_EXPORT

# (setq org-export-html-use-infojs nil)
如果你有任何问题或疑问，请发送Email至zrg1390556487@gmail.com！
# (setq org-export-html-style nil)

* 写在前面
  : 关于PHP的一些公共方法
* String/Array
** 字符串(String)
*** 字符串长度
    : $strLength=strlen($str);
*** 大小写转换
    : //小写转换为大写
    : strtoupper($str);
    : //大写转换为小写
    : strtolower($str);
*** 字符串截取
    : //截取字符串，取出最有一个字符
    : substr($str,0,-1);
** 数组(Array)
*** string⇌array
    : $array=explode(separator,$string);
    : $pizza = "piece1 piece2 piece3 piece4 piece5 piece6";
    : $pieces = explode(" ", $pizza);
    : echo $pieces[0]; // piece1
    : echo $pieces[1]; // piece2

    : // 数组转化为字符串，implode()
    : $string=implode(glue,$array);
*** array 去除空元素
    : //去除空元素
    : array_filter()
*** array 去除重复元素
    : //去除重复元素
    : array_unique()
*** 判断二维数组是否为空
    #+BEGIN_SRC emacs-lisp
function array_is_null($arr = null){ 
	if(is_array($arr)){ 
		foreach($arr as $k=>$v){ 
			if($v&&!is_array($v)){ 
				return false; 
			}
			$t = self::array_is_null($v); 
			if(!$t){ 
				return false; 
			} 
		}
		return true; 
	}elseif(!$arr){ 
		return true; 
	}else{ 
		return false; 
	}
}
    #+END_SRC
* Date/Time
** 获取当月天数及当月第一天及最后一天、上月第一天及最后一天
*** 获取上个月第一天及最后一天
    : echo date('Y-m-01', strtotime('-1 month'));
    : echo date('Y-m-t', strtotime('-1 month'));

    : //上个月第一天:
    : echo date('Y-m-d', strtotime(date('Y-m-01') . ' -1 month')); // 计算出本月第一天再减一个月
    : //上个月最后一天:
    : echo date('Y-m-d', strtotime(date('Y-m-01') . ' -1 day')); // 计算出本月第一天再减一天
*** 获取当月第一天及最后一天
    : $BeginDate=date('Y-m-01', strtotime(date("Y-m-d")));
    : echo date('Y-m-d', strtotime("$BeginDate +1 month -1 day"));
*** 获取当前年份、月份、日、天数
    : echo " 本月共有:".date("t")."天";
    : echo " 当前年份".date('Y');
    : echo " 当前月份".date('m');
    : echo " 当前几号".date('d');
** 日期转时间戳，时间戳转日期
   : strtotime('2010-03-24 08:15:42');
   : date('Y-m-d H:i:s', 1156219870);





** 计算日期/时间差
*** 计算已成为会员多少天或距离某活动还剩余多少天?
    #+NAME: 计算函数
    #+BEGIN_SRC emacs-lisp
function get_days_calc($calcTime, $currentTime, $differOrSurplus){
	switch ($differOrSurplus) {
	case 1:
		return round(($currentTime-$calcTime)/3600/24);
		break;
	case 2:
		return round(($calcTime-$currentTime)/3600/24);
		break;
	default:
		return round(($currentTime-$calcTime)/3600/24);
		break;
	}
}
    #+END_SRC
* URL常用函数
** 获取当前URL
   #+NAME: 获取当前URL
   #+BEGIN_SRC emacs-lisp
function getCurrentPageURL()
{
	$pageURL = 'http';
	if (isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"] == "on")
	{
		$pageURL .= "s";
	}
	$pageURL .= "://";
	if ($_SERVER["SERVER_PORT"] != "80")
	{
		$pageURL .= $_SERVER["SERVER_NAME"] . ":" . $_SERVER["SERVER_PORT"] . $_SERVER["REQUEST_URI"];
	}
	else
	{
		$pageURL .= $_SERVER["SERVER_NAME"] . $_SERVER["REQUEST_URI"];
	}
	return $pageURL;
}
   #+END_SRC
** 请求处理
   #+NAME: 请求处理
   #+BEGIN_SRC emacs-lisp
function curl( $url = '',$method = 'GET',$req_data = false,$header = false,$response_header = false,$exec_time = 5,$connect_time = 5 )
{
	$method = strtoupper( $method );
	$ch = curl_init();
        // 设置请求url
	curl_setopt( $ch,CURLOPT_URL,$url );
        // 设置请求方法,默认执行GET请求，无需设置
	if( 'POST' == $method ){
		curl_setopt( $ch, CURLOPT_POST,1 );
	}elseif( 'GET' != $method ){
		curl_setopt( $ch, CURLOPT_CUSTOMREQUEST,$method );
	}
        // 设置请求头
	if( null != $header && is_array($header) ){
		curl_setopt( $ch,CURLOPT_HTTPHEADER,array_map(function($field,$value){
			return $field . ':' . $value;
		}, array_keys($header), $header) );
	}
        // 设置请请求数据
	if( null != $req_data && 'GET' != $method ){
		if ( is_array($req_data) && !isset($req_data['isfile']) ){
			$req_data = http_build_query($req_data);
		}
		curl_setopt( $ch,CURLOPT_POSTFIELDS,$req_data );
	}
        //设置输出数据中包含http header
	curl_setopt( $ch, CURLOPT_HEADER,$response_header );
	// 将curl_exec()获取的信息以字符串返回，而不是直接输出
	curl_setopt( $ch,CURLOPT_RETURNTRANSFER,true );
        // 允许 cURL 函数执行的最长秒数。
	curl_setopt( $ch,CURLOPT_TIMEOUT,$exec_time );
        //在尝试连接时等待的秒数。设置为0，则无限等待
	curl_setopt( $ch,CURLOPT_CONNECTTIMEOUT,$connect_time );
        // 执行curl请求
	$response = curl_exec($ch);
        //获取状态码
	$status = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        //关闭curl回话并释放资源
	curl_close($ch);
        //分离header与body
	if( $response_header ){
		$tmp         = explode("\r\n\r\n", $response);
		$resp_header = $tmp[0];
		$data        = $tmp[1];
	} else {
		$resp_header = null;
		$data        = $response;
	}
	$result['errcode'] = $status;
	$result['header']  = $resp_header;
	$result['data']    = $data;
	return $result;
}
   #+END_SRC
