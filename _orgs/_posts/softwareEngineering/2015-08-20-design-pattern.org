#+TITLE:     设计模式（Design Pattern）
#+AUTHOR:    赵仁贵
#+EMAIL:     zrg1390556487@gmail.com
#+LANGUAGE:  cn
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:plain toc:t ltoc:t mouse:underline buttons:0 path:http://cs3.swfc.edu.cn/~20121156044/.org-info.js />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://cs3.swfu.edu.cn/~20121156044/.org-manual.css" />
#+HTML_HEAD: <style>body {font-size:14pt} code {font-weight:bold;font-size:100%; color:darkblue}</style>
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT: 

#+BEGIN_EXPORT HTML
---
layout: post
title: 设计模式
author: zrg
comments: false
description: 设计模式
categories:
- 软件工程
tags:
- Design Pattern
photos:
---
#+END_EXPORT

# (setq org-export-html-use-infojs nil)
# (setq org-export-html-style nil)

* 简介
** 设计模式的定义
** GoF设计模式简介
#+CAPTION:GoF 23种模式一览表
| 范围\目的 | 创建型模式   | 结构性模式         | 行为型模式   |
|-----------+--------------+--------------------+--------------|
| 类模式    | 工厂方法模式 | （类）适配器模式   | 解释器模式   |
|           |              |                    | 模板方法模式 |
|-----------+--------------+--------------------+--------------|
| 对象模式  | 抽象工厂模式 | （对象）适配器模式 | 职责链模式   |
|           | 建造者       | 桥接模式           | 命令模式     |
|           | 原型模式     | 组合模式           | 迭代器模式   |
|           | 单例模式     | 装饰模式           | 中介者模式   |
|           |              | 外观模式           | 备忘录模式   |
|           |              | 享元模式           | 观察者模式   |
|           |              | 代理模式           | 状态模式     |
|           |              |                    | 策略模式     |
|           |              |                    | 访问者模式   |
* 创建型模式
** 介绍
#+BEGIN_SRC emacs-lisp
创建型模式(Creational Pattern)对类的实例化过程进行了抽象，能够将软件模块中对象的创建和对象的使用分离。为了使软件的结构更加清晰，外界对于这些对象
只需要知道它们共同的接口，而不清楚其具体的实现细节，使整个系统的设计更加符合单一职责原则。

创建型模式在创建什么(What)，由谁创建(Who)，何时创建(When)等方面都为软件设计者提供了尽可能大的灵活性。创建型模式隐藏了类的实例的创建细节，通过隐藏
对象如何被创建和组合在一起达到使整个系统独立的目的。
#+END_SRC
** 创建型模式有哪些？
#+BEGIN_SRC emacs-lisp

简单工厂模式（Simple Factory）
重要程度：4 （5为满分）

工厂方法模式（Factory Method）
重要程度：5

抽象工厂模式（Abstract Factory）
重要程度：5

建造者模式（Builder）
重要程度：2

原型模式（Prototype）
重要程度：3

单例模式（Singleton）
重要程度：4
#+END_SRC
** 简单工厂模式
*** 模式定义
#+BEGIN_SRC emacs-lisp
简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回
不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。
#+END_SRC
*** 举例说明
#+BEGIN_SRC java
/**
 * 简单工厂模式（Simple Factory Pattern）应用举例：多种支付方式。
 */
// 1.抽象支付方法类
public abstract class AbstractPay{
	public abstract void pay();
}
// 2.支付方式类
// 现金支付类
public class CashPay extends AbstractPay{
	public void pay(){
		// 现金支付处理代码
	}
}
// 信用卡支付类
public class CreditcardPay extends AbstractPay{
	public void pay(){
		// 信用卡支付处理代码
	}
}
// 3.支付方式工厂类
public class PayMethodFactory{
	public static AbstractPay getPayMethod(String type){
		if (type.equalsIgnoreCase("cash")) {
			return new CashPay(); // 根据参数创建具体产品
		}else if (type.equalsIgnoreCase("creditcard")) {
			return new CreditcardPay(); // 根据参数创建具体产品
		}else{
			// ...
		}
	}
}
#+END_SRC
*** 模式分析
#+BEGIN_SRC emacs-lisp
1.意义：
1)将对象的创建和对象本身业务处理分离可以降低系统的耦合度，使得两者修改起来都相对容易。	2)使用简单工厂模式后，系统中类的个数增加，每一种支付处理方式都封装到单独的模式中，而且工厂类中只有简单的判断逻辑代码，不需要关心具体的业务处理过程，满足“单一职责原则”。#
3)在调用工厂类的工厂方法时，由于工厂方法是静态方法，使用起来很方便，可通过类名直接调用，而且只需要传入一个简单的参数即可，在实际开发中，还可以在调用时将所传入的参数保存在XML等格式的配置文件中，修改参数时无须修改任何源代码。

简单工厂模式最大的问题在于工厂类的职责相对过重，增加新的产品需要修改工厂类的判断逻辑，这一点与开闭原则是相违背的。

简单工厂模式的要点在于：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。
#+END_SRC
*** 模式应用
#+BEGIN_SRC emacs-lisp
1. JDK类库中广泛使用了简单工厂模式，如工具类java.text.DateFormat，它用于格式化一个本地日期或者时间。
public final static DateFormat getDateInstance();
public final static DateFormat getDateInstance(int style);
public final static DateFormat getDateInstance(int style,Locale
locale);

2. Java加密技术
获取不同加密算法的密钥生成器:
KeyGenerator keyGen=KeyGenerator.getInstance("DESede");

创建密码器:
Cipher cp=Cipher.getInstance("DESede");
#+END_SRC

** 工厂方法模式
** 抽象工厂模式
** 建造者模式
** 原型模式
** 单例模式
* 结构型模式
* 行为型模式
